import pygame
import math

# die Class Kugel erzeugt die Kugeln
class Kugel:
    #ensprechend der Kugel werden die Werte im Konstruktor gesetzt
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color
        self.radius = 20
        self.velX = 0
        self.velY = 0
        self.visible = True

    # Kugel wird gezeichnet
    def drawBall(self, window):
        if self.visible:
            pygame.draw.circle(window, self.color, (int(self.x), int(self.y)), self.radius)

    # Kugel wird x,y mäßig bewegt
    def move(self):
        self.x += self.velX
        self.y += self.velY

    # Kollisionen mit der Wand werden berechnet & die Geschwindigkeit entspr. umgekehrt
    def checkWallCollision(self, windowWidth, windowHeight):
        if self.x - self.radius < 0:
            self.x = self.radius
            self.velX *= -1
        elif self.x + self.radius > windowWidth:
            self.x = windowWidth - self.radius
            self.velX *= -1

        if self.y - self.radius < 0:
            self.y = self.radius
            self.velY *= -1
        elif self.y + self.radius > windowHeight:
            self.y = windowHeight - self.radius
            self.velY *= -1

    # Kugelposition entsprechen x,y setzen
    def setPosition(self, x, y):
        self.x = x
        self.y = y

    # Wenn Kugeln aneinanderstoßen wird die neue Distanz ermittelt
    # und zurück gegeben
    def isOverlapping(self, otherBall):
        dx = self.x - otherBall.x
        dy = self.y - otherBall.y
        distance = math.sqrt(dx ** 2 + dy ** 2)
        return distance <= self.radius + otherBall.radius

    # berechnet, wenn Kugeln aneinander stoßen, Kugeln werden
    # auch verschoben, um so eine Überlappung zu vermeiden
    def resolveCollision(self, otherBall):
        dx = self.x - otherBall.x
        dy = self.y - otherBall.y
        # Pythagoras
        distance = math.sqrt(dx ** 2 + dy ** 2)

        # Berechnung der Überlappung
        overlap = (self.radius + otherBall.radius) - distance
        if overlap > 0:
            # Verschieben der Kugeln, um die Überlappung zu beseitigen
            angle = math.atan2(dy, dx)
            self.x += math.cos(angle) * overlap / 2
            self.y += math.sin(angle) * overlap / 2
            otherBall.x -= math.cos(angle) * overlap / 2
            otherBall.y -= math.sin(angle) * overlap / 2

            # Berechnung der neuen Geschwindigkeiten nach der Kollision
            selfAngle = math.atan2(self.velY, self.velX)
            otherAngle = math.atan2(otherBall.velY, otherBall.velX)
            selfSpeed = math.sqrt(self.velX ** 2 + self.velY ** 2)
            otherSpeed = math.sqrt(otherBall.velX ** 2 + otherBall.velY ** 2)
            newSelfAngle = selfAngle - angle
            newOtherAngle = otherAngle - angle

            # Vertauschen der Geschwindigkeitskomponenten tangential zur Kollisionsrichtung
            selfVelX = math.cos(newSelfAngle) * selfSpeed
            selfVelY = math.sin(newSelfAngle) * selfSpeed
            otherVelX = math.cos(newOtherAngle) * otherSpeed
            otherVelY = math.sin(newOtherAngle) * otherSpeed

            # Berechnung der neuen Geschwindigkeiten nach dem elastischen Stoß
            finalSelfVelX = ((selfVelX * (self.radius - otherBall.radius) + (
                    2 * otherBall.radius * otherVelX)) / (
                                       self.radius + otherBall.radius)) * math.cos(angle) + selfVelX * math.cos(
                angle + math.pi / 2) * math.cos(angle)
            finalSelfVelY = ((selfVelX * (self.radius - otherBall.radius) + (
                    2 * otherBall.radius * otherVelX)) / (
                                       self.radius + otherBall.radius)) * math.sin(angle) + selfVelX * math.cos(
                angle + math.pi / 2) * math.sin(angle)
            finalOtherVelX = ((otherVelX * (otherBall.radius - self.radius) + (
                    2 * self.radius * selfVelX)) / (
                                         self.radius + otherBall.radius)) * math.cos(angle) + otherVelX * math.cos(
                angle + math.pi / 2) * math.cos(angle)
            finalOtherVelY = ((otherVelX * (otherBall.radius - self.radius) + (
                    2 * self.radius * selfVelX)) / (
                                         self.radius + otherBall.radius)) * math.sin(angle) + otherVelX * math.cos(
                angle + math.pi / 2) * math.sin(angle)

            # Setzen der neuen Geschwindigkeiten
            self.velX = finalSelfVelX
            self.velY = finalSelfVelY
            otherBall.velX = finalOtherVelX
            otherBall.velY = finalOtherVelY
