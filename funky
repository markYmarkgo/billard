import math
import ctypes
from Ball import Ball


def reset_game(white_ball, colored_balls, ball_colors, positions, WINDOW_WIDTH, WINDOW_HEIGHT):
    # Entfernen der weißen Kugel aus der Liste der farbigen Kugeln, falls sie vorhanden ist
    if white_ball in colored_balls:
        colored_balls.remove(white_ball)

    white_ball.set_position(positions[0][0], positions[0][1])
    white_ball.vel_x = 0
    white_ball.vel_y = 0
    white_ball.visible = True

    # Anordnen der farbigen Kugeln in einer Dreiecksformation
    for i, ball in enumerate(colored_balls):
        ball.set_position(positions[i + 1][0], positions[i + 1][1])
        ball.vel_x = 0
        ball.vel_y = 0
        ball.visible = True

def check_pocket_collision(ball, pockets):
    for pocket_obj in pockets:
        dx = ball.x - pocket_obj.x
        dy = ball.y - pocket_obj.y
        distance = math.sqrt(dx ** 2 + dy ** 2)

        if distance <= pocket_obj.radius:
            return True

    return False

def arrange_balls_at_positions(ball_colors, positions):
    colored_balls = []
    for pos, color in zip(positions, ball_colors):
        # Ignoriere die weiße Kugel (Farbe Weiß) beim Neuarrangieren
        if color != (255, 255, 255):  # RGB-Wert für Weiß
            colored_balls.append(Ball(pos[0], pos[1], color))
    return colored_balls

def msgbox(title, text):
    return ctypes.windll.user32.MessageBoxW(0, text, title, 1)

def gameStatus(ballColor, sunk_balls, ball_colors):
    print("gameSTatus wird aufgerufen")
"""    
    global game_status
    if ballColor == BLACK:
        if len(sunk_balls) == len(ball_colors) - 2:  # -1 für die weiße Kugel, -1 für die schwarze Kugel
            game_status = 1
        else:
            game_status = -1
    else:
        if ballColor not in sunk_balls:
            sunk_balls.append(ballColor)
            
"""
