import math
from Ball import Ball
import ctypes

def reset_game(white_ball, colored_balls, ball_colors, positions, WINDOW_WIDTH, WINDOW_HEIGHT):
    # Entfernen der weißen Kugel aus der Liste der farbigen Kugeln
    colored_balls = [ball for ball in colored_balls if ball != white_ball]

    white_ball.set_position(WINDOW_WIDTH // 4, WINDOW_HEIGHT // 2)
    white_ball.vel_x = 0
    white_ball.vel_y = 0
    white_ball.visible = True

    # Anordnen der farbigen Kugeln in einer Dreiecksformation
    dreieck_basis = 3  # Anzahl der Kugeln in der unteren Reihe des Dreiecks
    dreieck_offset = 40  # Horizontaler Abstand zwischen den Kugeln im Dreieck
    dreieck_hoehe = int(dreieck_offset * math.sqrt(3) / 2)  # Vertikaler Abstand zwischen den Reihen im Dreieck

    for i, ball in enumerate(colored_balls):
        reihe = i // dreieck_basis  # Aktuelle Reihe berechnen
        spalte = i % dreieck_basis  # Aktuelle Spalte berechnen
        ball_x = WINDOW_WIDTH * 3 // 4 + (spalte - (dreieck_basis - 1) / 2) * dreieck_offset
        ball_y = WINDOW_HEIGHT // 2 + reihe * dreieck_hoehe
        ball.set_position(ball_x, ball_y)
        ball.vel_x = 0
        ball.vel_y = 0
        ball.visible = True

def check_pocket_collision(ball, pockets):
    for pocket_obj in pockets:
        dx = ball.x - pocket_obj.x
        dy = ball.y - pocket_obj.y
        distance = math.sqrt(dx ** 2 + dy ** 2)

        if distance <= pocket_obj.radius:
            return True

    return False

def arrange_balls_at_positions(ball_colors, positions):
    colored_balls = []
    for pos, color in zip(positions, ball_colors):
        # Ignoriere die weiße Kugel (Farbe Weiß) beim Neuarrangieren
        if color != (255, 255, 255):  # RGB-Wert für Weiß
            colored_balls.append(Ball(pos[0], pos[1], color))
    return colored_balls

def msgbox(title, text):
    return ctypes.windll.user32.MessageBoxW(0, text, title, 1)
