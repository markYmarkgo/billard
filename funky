import math
from Ball import Ball

import math

def reset_game(white_ball, colored_balls, WINDOW_WIDTH, WINDOW_HEIGHT):
    white_ball.x = WINDOW_WIDTH // 4
    white_ball.y = WINDOW_HEIGHT // 2
    white_ball.vel_x = 0
    white_ball.vel_y = 0
    white_ball.visible = True

    for i, ball in enumerate(colored_balls):
        ball.x = WINDOW_WIDTH * 3 // 4
        ball.y = WINDOW_HEIGHT * (i + 1) // (len(colored_balls) + 1)
        ball.vel_x = 0
        ball.vel_y = 0
        ball.visible = True

def check_pocket_collision(ball, pockets):
    for pocket_obj in pockets:
        dx = ball.x - pocket_obj.x
        dy = ball.y - pocket_obj.y
        distance = math.sqrt(dx ** 2 + dy ** 2)

        if distance <= pocket_obj.radius:
            return True

    return False

def arrange_balls_in_triangle(ball_colors, WINDOW_WIDTH, WINDOW_HEIGHT):
    colored_balls = []

    # Calculate the positions for arranging the balls in an equilateral triangle
    rows = 4
    ball_radius = 20
    start_x = WINDOW_WIDTH * 3 // 4  # Verschiebung nach rechts
    start_y = WINDOW_HEIGHT // 2 - (rows // 2) * (2 * ball_radius) + ball_radius

    color_count = {}
    for color in ball_colors:
        color_count[color] = 0

    for i in range(rows):
        num_balls_in_row = i + 1
        row_y = start_y + i * (2 * ball_radius * math.sin(math.pi / 3))

        for j in range(num_balls_in_row):
            color_count[ball_colors[j]] += 1
            ball = Ball(start_x + (j - i / 2) * (ball_radius * 2), row_y, ball_colors[j], ball_radius)
            colored_balls.append(ball)

    return colored_balls
